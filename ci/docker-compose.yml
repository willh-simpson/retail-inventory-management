version: "3.8"

services:
    postgres:
        image: postgres:15
        container_name: postgres
        restart: unless-stopped
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres
            POSTGRES_DB: inventorydb
        ports:
            - "5432:5432"
        volumes:
            - postgres_data:/var/lib/postgresql/data
            - ./postgres-init:/docker-entrypoint-initdb.d

    mongo:
        image: mongo:6
        container_name: mongo
        restart: unless-stopped
        ports:
            - "27017:27017"
        volumes:
            - mongo_data:/data/db

    kafka:
        image: confluentinc/cp-kafka:7.4.0
        restart: unless-stopped
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,HOST://localhost:29092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        ports:
            ["9092:9092", "29092:29092"]
    
    zookeeper:
        image: confluentinc/cp-zookeeper:7.4.0
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181

    redis:
        image: redis:7
        restart: unless-stopped
        ports: ["6379:6379"]
    
    prometheus:
        image: prom/prometheus:latest
        container_name: prometheus
        ports:
            - "9090:9090"
        volumes:
            - ./prometheus.yml:/etc/prometheus/prometheus.yml
        networks:
            - monitoring
    
    grafana:
        image: grafana/grafana:latest
        container_name: grafana
        ports:
            - "3000:3000"
        networks:
            - monitoring

    inventory-service:
        build:
            context: ./inventory_service
        container_name: inventory-service
        ports:
            - "8081:8080"
        depends_on:
            - postgres
            - kafka
            - redis
        environment:
            SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/inventorydb
            SPRING_DATASOURCE_USERNAME: postgres
            SPRING_DATASOURCE_PASSWORD: postgres
            SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
            SPRING_DATA_REDIS_HOST: redis

    order-service:
        build:
            context: ./order_service
        container_name: order-service
        ports:
            - "8082:8080"
        depends_on:
            - mongo
            - postgres
            - kafka
            - redis
        environment:
            SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5423/orderdb
            SPRING_DATASOURCE_USERNAME: postgres
            SPRING_DATASOURCE_PASSWORD: postgres
            SPRING_DATA_MONGODB_URI: mongodb://mongo:27017/orders
            SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
            SPRING_DATA_REDIS_HOST: redis

volumes:
    postgres_data:
    mongo_data:

networks:
    monitoring:
        driver: bridge